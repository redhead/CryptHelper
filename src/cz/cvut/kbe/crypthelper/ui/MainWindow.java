/*
 * Software License Agreement (BSD License)
 * 
 * Copyright (c) 2012, Radek Ježdík <jezdik.radek@gmail.com>
 * All rights reserved.
 * 
 * Redistribution and use of this software in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 *   Redistributions of source code must retain the above
 *   copyright notice, this list of conditions and the
 *   following disclaimer.
 * 
 *   Redistributions in binary form must reproduce the above
 *   copyright notice, this list of conditions and the
 *   following disclaimer in the documentation and/or other
 *   materials provided with the distribution.
 * 
 *   Neither the name of Radek Ježdík <jezdik.radek@gmail.com> nor the names of its
 *   contributors may be used to endorse or promote products
 *   derived from this software without specific prior
 *   written permission by Radek Ježdík <jezdik.radek@gmail.com>
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
 * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package cz.cvut.kbe.crypthelper.ui;

import cz.cvut.kbe.crypthelper.MainPanelController;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;


/**
 *
 * @author Radek Ježdík
 */
public class MainWindow extends javax.swing.JFrame {

	private static final ImageIcon closeButton = new ImageIcon(MainWindow.class.getResource("close.png"));

	private static int counter = 0;


	public MainWindow() {
		initComponents();

		createTab();
	}


	public MainPanel getView() {
		return (MainPanel) tabbedPane.getSelectedComponent();
	}


	public String getViewTitle() {
		int i = tabbedPane.getSelectedIndex();
		JLabel label = (JLabel) ((JPanel) tabbedPane.getTabComponentAt(i)).getComponent(0);
		return label.getText();
	}


	public MainPanel getView(String tabTitle) {
		int cnt = tabbedPane.getTabCount();
		for(int i = 0; i < cnt; i++) {
			JPanel panel = ((JPanel) tabbedPane.getTabComponentAt(i));
			JLabel label = (JLabel) panel.getComponent(0);
			if(label.getText().equals(tabTitle)) {
				return (MainPanel) tabbedPane.getComponentAt(i);
			}
		}
		return null;
	}


	/** This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        newTabMenuItem = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        manualDecryptionMenuItem = new javax.swing.JMenuItem();
        nGramsMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        splitMenuItem = new javax.swing.JMenuItem();
        mergeMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CryptHelper");
        setExtendedState(JFrame.MAXIMIZED_BOTH);

        jMenu2.setText("Soubor");

        newTabMenuItem.setText("Nová záložka");
        jMenu2.add(newTabMenuItem);

        jMenuBar1.add(jMenu2);

        jMenu1.setText("Nástroje");

        manualDecryptionMenuItem.setText("Ruční dešifrování");
        jMenu1.add(manualDecryptionMenuItem);

        nGramsMenuItem.setText("Najít N-Gramy");
        jMenu1.add(nGramsMenuItem);
        jMenu1.add(jSeparator1);

        splitMenuItem.setText("Rozdělit text");
        jMenu1.add(splitMenuItem);

        mergeMenuItem.setText("Sjednotit text");
        jMenu1.add(mergeMenuItem);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 628, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuItem manualDecryptionMenuItem;
    private javax.swing.JMenuItem mergeMenuItem;
    private javax.swing.JMenuItem nGramsMenuItem;
    private javax.swing.JMenuItem newTabMenuItem;
    private javax.swing.JMenuItem splitMenuItem;
    private javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration//GEN-END:variables


	public JMenuItem getManualDecryptionMenuItem() {
		return manualDecryptionMenuItem;
	}


	public JMenuItem getNewTabMenuItem() {
		return newTabMenuItem;
	}


	public JMenuItem getSplitMenuItem() {
		return splitMenuItem;
	}


	public JMenuItem getMergeMenuItem() {
		return mergeMenuItem;
	}


	public JMenuItem getNGramsMenuItem() {
		return nGramsMenuItem;
	}


	public final MainPanel createTab() {
		return createTab(null, false);
	}


	public MainPanel createTab(String title, boolean unmergable) {
		MainPanelController controller = new MainPanelController(unmergable);
		final MainPanel content = controller.getPanel();

		JPanel tab = new JPanel();
		tab.setOpaque(false);

		JLabel tabLabel = new JLabel(title == null ? "Text " + (++counter) : title);

		Dimension size = new Dimension(closeButton.getIconWidth() + 2, closeButton.getIconHeight() + 2);

		JButton tabCloseButton = new JButton(closeButton);
		tabCloseButton.setPreferredSize(size);
		tabCloseButton.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				int result = JOptionPane.showConfirmDialog(MainWindow.this, "Opravdu chcete zavřít tuto záložku?", "Zavřít?", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
				if(result == JOptionPane.NO_OPTION) return;

				int index = tabbedPane.indexOfComponent(content);
				tabbedPane.removeTabAt(index);
				if(tabbedPane.getTabCount() == 0) {
					tabbedPane.setVisible(false);
				}
			}

		});

		tab.add(tabLabel, BorderLayout.WEST);
		tab.add(tabCloseButton, BorderLayout.EAST);

		tabbedPane.addTab(null, content);
		tabbedPane.setTabComponentAt(tabbedPane.getTabCount() - 1, tab);
		tabbedPane.setVisible(true);

		return content;
	}

}
